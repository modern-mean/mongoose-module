{"version":3,"file":"module.js","sourceRoot":"","sources":["../../src/module.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseModule, ModuleConfig, LoggerOptions } from '@modern-mean/server-base-module';\nimport * as mongoose from 'mongoose';\n\nexport class MongooseModule extends BaseModule {\n\n  private config: ModuleConfig;\n\n  constructor(...args) {\n\n    super(MongooseLoggerConfig(), ...args);\n\n    //Set Config\n    this.config = this.configModule.getModule('MongooseModule') || this.configModule.defaults(MongooseDefaultConfig());\n\n    //Set Debug\n    mongoose.set('debug', this.config.options.debug);\n\n    this.logger.debug('MongooseModule::Constructor::Finished');\n  }\n\n  getMongoose(): mongoose.Mongoose {\n    return mongoose;\n  }\n\n  connect(): Promise<string> {\n    return new Promise((resolve, reject) => {\n\n      if (mongoose.connection.readyState !== 0) {\n        this.logger.debug('MongooseModule::Connect::Already Connected');\n        return resolve('Already Connected');\n      }\n\n      this.logger.debug('MongooseModule::Connect::Starting', this.config.options.uri);\n      mongoose.connect(this.config.options.uri, this.config.options.options);\n\n      /* istanbul ignore next */\n      mongoose.connection.once('error', err => { //Can't mock the process emit error\n        this.logger.error('Mongoose::Error', err);\n        return reject(err);\n      });\n\n      mongoose.connection.once('open', () => {\n        this.logger.debug('Mongoose::Connect::Success');\n        return resolve('Connected');\n      });\n\n    });\n  }\n\n  disconnect(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.logger.debug('Mongoose::Disconnect::Start');\n\n      if (mongoose.connection.readyState === 0) {\n        this.logger.debug('Mongoose::Disconnect::Not Connected');\n        return resolve('Not Connected');\n      }\n\n      mongoose.connection.once('disconnected', () => {\n        this.logger.debug('Mongoose::Disconnect::Success');\n        return resolve();\n      });\n\n      mongoose.disconnect();\n    });\n  }\n\n}\n\nexport interface MongooseOptions {\n  uri: string,\n  options: any,\n  debug: boolean\n}\n\nexport function MongooseDefaultConfig(): ModuleConfig {\n  let options: MongooseOptions = {\n    uri: process.env.MONGOOSEMODULE_URI || 'mongodb://localhost/modern-mean-dev',\n    options: {\n      //http://mongoosejs.com/docs/connections.html\n      user: process.env.MONGOOSEMODULE_USER || undefined,\n      password: process.env.MONGOOSEMODULE_PASSWORD || undefined\n    },\n    debug: process.env.MONGOOSEMODULE_DEBUG ? true : false\n  };\n  let config: ModuleConfig = {\n    module: 'MongooseModule',\n    type: 'config',\n    options: options\n  };\n  return config;\n}\n\nexport function MongooseLoggerConfig(): ModuleConfig {\n  let options: LoggerOptions = {\n    level:  process.env.MONGOOSEMODULE_LOG_LEVEL,\n    file: process.env.MONGOOSEMODULE_LOG_FILE,\n    console: process.env.MONGOOSEMODULE_LOG_CONSOLE\n  };\n  let config: ModuleConfig = {\n    module: 'LoggerModule',\n    type: 'config',\n    options: options\n  };\n  return config;\n}\n"]}