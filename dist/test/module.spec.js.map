{"version":3,"file":"module.spec.js","sourceRoot":"","sources":["../../test/module.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as test from 'blue-tape';\nimport * as testModule from '../src/module';\nimport * as mongoose from 'mongoose';\nimport * as sinon from 'sinon';\n\nlet moduleTest = new testModule.MongooseModule();\n\ntest('module.ts MongooseModule constructor', (assert) => {\n  assert.pass('should run successfully');\n  assert.equal(mongoose.get('debug'), false, 'should set debug false by default');\n  assert.end();\n});\n\ntest('module.ts MongooseModule connect', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let connectSpy = sandbox.spy(mongoose, 'connect');\n  let config = testModule.MongooseDefaultConfig();\n  moduleTest.connect()\n    .then(res => {\n      assert.equal(res, 'Connected', 'should resolve Connected string');\n      assert.equal(connectSpy.called, true, 'should call mongoose.connect');\n      assert.equal(connectSpy.args[0][0], config.options.uri, 'should call mongoose.connect with default URI');\n      assert.equal(moduleTest.getMongoose().connection.readyState, 1, 'mongoose readyState should be 1');\n      sandbox.restore();\n      moduleTest.disconnect();\n      assert.end();\n    });\n});\n\ntest('module.ts MongooseModule connect when already connected', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let connectSpy;\n  moduleTest.connect()\n    .then(res => {\n      connectSpy = sandbox.spy(mongoose, 'connect');\n    })\n    .then(res => moduleTest.connect())\n    .then((res) => {\n      assert.equal(res, 'Already Connected', 'should resolve Already Connected string');\n      assert.equal(connectSpy.called, false, 'should not call mongoose.connect');\n      sandbox.restore();\n      moduleTest.disconnect();\n      assert.end();\n    });\n});\n\ntest('module.ts MongooseModule getMongoose()', (assert) => {\n  let ret = moduleTest.getMongoose();\n  assert.equal(ret instanceof mongoose.Mongoose, true , 'should return the mongoose instance');\n  assert.end();\n});\n\ntest('module.ts MongooseModule disconnect', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let disconnectSpy = sandbox.spy(mongoose, 'disconnect');\n  moduleTest.connect()\n    .then(ret => moduleTest.disconnect())\n    .then((ret) => {\n      assert.equal(ret, 'Disconnected', 'should resolve Disconnected string');\n      assert.equal(disconnectSpy.called, true, 'should call mongoose.disconnect');\n      assert.equal(moduleTest.getMongoose().connection.readyState, 0, 'mongoose readyState should be 0');\n      sandbox.restore();\n      assert.end();\n    });\n});\n\ntest('module.ts MongooseModule disconnect when not connected', (assert) => {\n  let sandbox = sinon.sandbox.create();\n  let disconnectSpy = sandbox.spy(mongoose, 'disconnect');\n  moduleTest.disconnect()\n    .then((ret) => {\n      assert.equal(ret, 'Not Connected', 'should resolve Not Connected string');\n      assert.equal(disconnectSpy.called, false, 'should not call mongoose.disconnect');\n      assert.equal(moduleTest.getMongoose().connection.readyState, 0, 'mongoose readyState should be 0');\n      sandbox.restore();\n      assert.end();\n    });\n});\n\n\n"]}